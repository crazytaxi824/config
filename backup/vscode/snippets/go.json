{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  //   "prefix": "log",
  //   "body": ["console.log('$1');", "$2"],
  //   "description": "Log output to console"
  // }
  "if err": {
    "prefix": "err-if",
    "body": "if ${1:err} != nil {\n\t${2:log.Println($1)}\n\treturn\n}",
    "description": "Snippets for if-err"
  },
  "if er short": {
    "prefix": "if-er",
    "body": "if ${1:er} := ${2:fn()}; er != nil {\n\t${3:log.Println($1)}\n\treturn\n}}",
    "description": "Snippets for if-er short"
  },
  "fmt.Println()": {
    "prefix": "fmtp",
    "body": "fmt.Println($1)",
    "description": "Snippets for fmt.Println()"
  },
  "fmt.Printf()": {
    "prefix": "fmtf",
    "body": "fmt.Printf(\"${1:msg} %v\\n}\", ${2:value})",
    "description": "Snippets for fmt.Printf()"
  },
  "fmt.Sprintf()": {
    "prefix": "fmts",
    "body": "fmt.Sprintf(\"${1:msg} %v\\n}\", ${2:value})",
    "description": "Snippets for fmt.Sprintf()"
  },
  "fmt.Errorf()": {
    "prefix": "fmterr",
    "body": "fmt.Errorf(\"${1:msg} %w}\", ${2:err})",
    "description": "Snippets for fmt.Errorf()"
  },
  "log.Println()": {
    "prefix": "logp",
    "body": "log.Println($1)",
    "description": "Snippets for log.Println()"
  },
  "log.SetFlags()": {
    "prefix": "logset",
    "body": "log.SetFlags(log.Lshortfile)\n",
    "description": "Snippets for log.SetFlags()"
  },
  "time.Sleep()": {
    "prefix": "sleep",
    "body": "time.Sleep(${1:3} * time.${2:Second})",
    "description": "Snippets for time.Sleep()"
  },
  "function declaration": {
    "prefix": "func",
    "body": "func $1($2) $3 {\n\t$4\n}",
    "description": "Snippet for function declaration"
  },
  "go func(){...}()": {
    "prefix": "go-func",
    "body": "go func() {\n\t$1\n}()",
    "description": "Snippets for go-func()"
  },
  "defer func(){...}()": {
    "prefix": "defer-func",
    "body": "defer func() {\n\t$1\n}()",
    "description": "Snippets for defer-func()"
  },
  "func main()": {
    "prefix": "main",
    "body": "func main() {\n\t$1\n}",
    "description": "Snippets for func-main()"
  },
  "TestMain()": {
    "prefix": "test-main",
    "body": "func TestMain(m *testing.M) {\n\t${1:// prepare data}\n\tos.Exit(m.Run())\n}"
  },
  "Unit Test": {
    "prefix": "test-unit",
    "body": "func Test${1:Foo}(t *testing.T) {\n\t$2\n}",
    "description": "Snippets for Unit-Test"
  },
  "Bench Test": {
    "prefix": "test-benchmark",
    "body": "func Benchmark${1:Foo}(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t${3:// code}\n\t}\n\t// b.ReportAllocs() // go test -benchmem\n}",
    "description": "Snippets for Benchmark-Test"
  },
  "Bench Parallel Test": {
    "prefix": "test-bench-parallel",
    "body": "func BenchmarkParallel${1:Foo}(b *testing.B) {\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() {\n\t\t\t${2:// code}\n\t\t}\n\t})\n\t// b.ReportAllocs() // go test -benchmem\n}",
    "description": "Snippets for Benchmark-Parallel-Test"
  },
  "Fuzz Test": {
    "prefix": "test-fuzz",
    "body": "func Fuzz${1:Foo}(f *testing.F) {\n\tf.Add(${2:100, \"abc\"}) // var type needs to match Fuzz func below\n\tf.Fuzz(func(t *testing.T, a int, b string) {\n\t\t${3:// code}\n\t})\n}",
    "description": "Snippets for Fuzz-Test"
  },
  "sync.WaitGroup": {
    "prefix": "wait-group",
    "body": "var wg = new(sync.WaitGroup)",
    "description": "Snippets for wait group"
  },
  "switch case": {
    "prefix": "switch-case",
    "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$3\ndefault:\n\t$4\n}",
    "description": "Snippets for Switch-Case"
  },
  "switch if-else": {
    "prefix": "switch-if-else",
    "body": "switch {\ncase ${1:1 == 1}: // if-else condition\n\t$2\n}",
    "description": "Snippets for Switch-If-Else"
  },
  "switch type": {
    "prefix": "switch-type",
    "body": "switch ${1:interface}.(type) {\ncase ${2:int}:\n\t$3\ndefault:\n\t$4\n}",
    "description": "Snippets for Switch-Type"
  },
  "select case": {
    "prefix": "select-case",
    "body": "select {\ncase v, ok := <-${1:channel}:\n\tif !ok {\n\t\treturn // channel closed\n\t}\n\t${2:// code}\ndefault:\n\t// default-case unblock 'select'\n\t// leave it empty, unless you know what you're doing\n}",
    "description": "Snippets for Switch-Case"
  },
  "for loop": {
    "prefix": "for-loop",
    "body": "for ${1:i} := 0; $1 < 100; $1++ {\n\t$2\n}",
    "description": "Snippets for For-Loop"
  },
  "for range": {
    "prefix": "for-range",
    "body": "for k, v := range ${1:slice} {\n\t$2\n}",
    "description": "Snippets for For-Range"
  },
  "for range channel": {
    "prefix": "for-range-channel",
    "body": "for v := range ${1:channel} {\n\t${2:// range over channel permits only one iteration variable}\n}",
    "description": "Snippets for For-Range-Channel"
  },
  "sync pool": {
    "prefix": "sync-Pool",
    "body": "var ${1:bufpool} = &sync.Pool{\n\tNew: func() interface{} {\n\t\tb := make([]byte, 8)\n\t\treturn &b // return pointer, use '$1.Get().(*[]byte)' assert value\n\t},\n}",
    "description": "Snippets for sync.Pool"
  },
  "ctx.WithTimeout()": {
    "prefix": "ctx-WithTimeout",
    "body": "ctx, cancel := context.WithTimeout(context.Background(), ${1:3}*time.Second)",
    "description": "Snippets for ctx.WithTimeout()"
  },
  "ctx.WithCancel()": {
    "prefix": "ctx-WithCancel",
    "body": "ctx, cancel := context.WithCancel(context.Background())",
    "description": "Snippets for ctx.WithCancel()"
  },
  "signal Notify": {
    "prefix": "signal-Notify",
    "body": "intrSig := make(chan os.Signal, 1)\nsignal.Notify(intrSig, os.Interrupt)\n<-intrSig\n// signal.Reset(os.Interrupt) // if Reset(...), press <Ctrl+C> again, process will be forced to close",
    "description": "Snippets for signal.Notify()"
  },
  "signal Notify Context": {
    "prefix": "signal-Notify-Context",
    "body": "sigCtx, stop := signal.NotifyContext(context.Background(), os.Interrupt)\n<-sigCtx.Done()\n// stop() // if stop(), press <Ctrl+C> again, process will be forced to close",
    "description": "Snippets for signal.NotifyContext()"
  },
  "rand pseudo": {
    "prefix": "rand-pseudo",
    "body": "r := rand.New(rand.NewSource(${1:time.Now().UnixNano()})) // unixnano() is the seed",
    "description": "Snippets for Pseudo-Random"
  },
  "rand crypto": {
    "prefix": "rand-crypto",
    "body": "v, err := rand.Int(rand.Reader, big.NewInt(100)) // rand.Reader uses diff API in diff systems, Don't change it",
    "description": "Snippets for True-Random"
  },
  "sort implementation": {
    "prefix": "sort-implement",
    "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int { return len(a) }\nfunc (a $1) Swap(i, j int) { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
    "description": "Snippet for Sort-Implementation"
  }
}
