# This is the config file, and a '#' or ';' character indicates a comment.
# ; 或者 # 都表示注释.

# change `git init` generated branch name. Default branch name is "master".
[init]
	defaultBranch = main

# 自定义 command, `git tree`, `git vtree`
[alias]
	# https://www.git-scm.com/docs/git-log#Documentation/git-log.txt-emnem
	# https://devhints.io/git-log-format
	# %C(xx) - 打印颜色, 256 位颜色.
	# %C(auto) - 使用 git 的 [color] 设置.
	# %C(reset) - 重置颜色为 white.
	# `$ git tree` 自定义命令, 显示缩略信息. 显示的信息有两行，第二行给一个空格, 否则有的行间距会变成2行.
	tree = log --graph --color=always --all --format=format:'%C(auto)%h -%d %s %C(243)(%ar)%C(reset)%n'' '
	# `$ git vtree` - 显示详细信息. 一共有三行: 第二行开头的空格数量是固定的, 因为都是 commit hash 宽度固定; 第三行给一个空格.
	vtree = log --graph --color=always --all --date=format:'%d-%b-%Y %H:%M:%S' --format=format:'%C(auto)%h -%d %C(74)%ad %C(243)(%ar) - %C(173)%an%C(reset)%n''          %C(auto)%s%n'' '

# https://git-scm.com/docs/git-config#Documentation/git-config.txt-coloradvice
# color value 为 style ... fg bg, bold ul 234 191 意思是 bold, underline, fg=234, bg=191
[color]
	# if color.branch color.diff color.grep color.advice color.interactive color.remote ... unset,
	# then the value of color.ui is used (`auto` by default)
	ui = auto
[color "diff"]
	commit = 191        # commit header, eg: commit abcdefg...xyz
	meta = bold ul 251  # metainformation, eg: file name
	#frag = 234 191     # hunk header, eg: @@ -1,45 +1,50 @@
	context = 248       # unchanged text
	old = 241 "#300000" # - removed lines, 默认为 red
	new = 42            # + added lines, 默认为 green
	oldMoved = bold 213 # line moved to a new place
	newMoved = bold 81  # line moved to a new place
[color "decorate"]
	HEAD = bold 207    # HEAD
	branch = bold 42   # local branch
	remoteBranch = bold 167
	tag = bold 191
	#stash = bold 75
[color "branch"]  # `git branch` or `git branch --remote` 可查看 branch list
	current = bold 42
	local = 251
	remote = 167
